let DataTypes,Model,sequelize,md5,Users;_e58‍.x([["default",()=>_e58‍.o]]);_e58‍.w("sequelize",[["DataTypes",["DataTypes"],function(v){DataTypes=v}],["Model",["Model"],function(v){Model=v}]]);_e58‍.w("../services/sequelize",[["default",["sequelize"],function(v){sequelize=v}]]);_e58‍.w("md5",[["default",["md5"],function(v){md5=v}]]);_e58‍.w("./Users",[["default",["Users"],function(v){Users=v}]]);




class Messages extends Model {
}

Messages.init(
  {
    id: {
      type: DataTypes.BIGINT.UNSIGNED,
      allowNull: false,
      autoIncrement: true,
      primaryKey: true,
    },
    // from: {
    //   type: DataTypes.STRING,
    //   allowNull: false,
    // },
    // to: {
    //   type: DataTypes.STRING,
    //   allowNull: false,
    // },
    text: {
      type: DataTypes.TEXT('long'),
      allowNull: false,
    },
  },
  {
    modelName: "messages",
    tableName: "messages",
    sequelize,
  }
);
Messages.belongsTo(Users, {
  foreignKey: 'from',
  onUpdate: 'cascade',
  onDelete: 'cascade',
  as: 'user',
});

Users.hasMany(Messages, {
  foreignKey: 'from',
  onUpdate: 'cascade',
  onDelete: 'cascade',
  as: 'messages',
});

Messages.belongsTo(Users, {
  foreignKey: 'to',
  onUpdate: 'cascade',
  onDelete: 'cascade',
  as: 'friend',
})

Users.hasMany(Messages, {
  foreignKey: 'to',
  onUpdate: 'cascade',
  onDelete: 'cascade',
  as: 'friendMessages',
});

_e58‍.d(Messages);
